(import-from typing List "" 1)
(import-from typing Dict "" 1)
(import-from typing Tuple "" 1)
(import-from typing Optional "" 1)
(import-from typing Union "" 1)
(: add_numbers (-> int int int))
(function-def add_numbers "global" 3 5)
(function-param add_numbers 0 a int)
(function-param add_numbers 1 b int)
(bin-op Add Any Any "function:add_numbers" 5)
(: format_name (-> str str str))
(function-def format_name "global" 7 9)
(function-param format_name 0 first str)
(function-param format_name 1 last str)
(bin-op Add String Any "function:format_name" 9)
(bin-op Add Any String "function:format_name" 9)
(: calculate_total (-> List[str] List[float] float))
(function-def calculate_total "global" 11 16)
(function-param calculate_total 0 items List[str])
(function-param calculate_total 1 prices List[float])
(: function:calculate_total.total Number)
(variable-assign total "function:calculate_total" 13)
(function-call enumerate 1 "function:calculate_total" 14)
(: format_receipt (-> List[str] List[float] str))
(function-def format_receipt "global" 18 27)
(function-param format_receipt 0 items List[str])
(function-param format_receipt 1 prices List[float])
(: function:format_receipt.receipt String)
(variable-assign receipt "function:format_receipt" 20)
(function-call enumerate 1 "function:format_receipt" 21)
(bin-op Add String String "function:format_receipt" 23)
(bin-op Add String Any "function:format_receipt" 23)
(bin-op Add Any String "function:format_receipt" 23)
(bin-op Add String String "function:format_receipt" 26)
(bin-op Add String calculate_total "function:format_receipt" 26)
(function-call calculate_total 2 "function:format_receipt" 26)
(: process_data (-> Dict[str] Tuple[str, int]))
(function-def process_data "global" 29 37)
(function-param process_data 0 data Dict[str])
(: function:process_data.name Any)
(variable-assign name "function:process_data" 31)
(function-call data.get 2 "function:process_data" 31)
(: function:process_data.value Any)
(variable-assign value "function:process_data" 32)
(function-call data.get 2 "function:process_data" 32)
(: function:process_data.result Any)
(variable-assign result "function:process_data" 35)
(bin-op Add Any Any "function:process_data" 35)
(: divide_values (-> float float float))
(function-def divide_values "global" 39 42)
(function-param divide_values 0 a float)
(function-param divide_values 1 b float)
(bin-op Div Any Any "function:divide_values" 42)
(: get_discount (-> float float float))
(function-def get_discount "global" 44 46)
(function-param get_discount 0 price float)
(function-param get_discount 1 percent float)
(bin-op Mult Any Any "function:get_discount" 46)
(bin-op Div Any Number "function:get_discount" 46)
(: apply_discount (-> float Any float))
(function-def apply_discount "global" 48 50)
(function-param apply_discount 0 price float)
(function-param apply_discount 1 discount_func Any)
(bin-op Sub Any discount_func "function:apply_discount" 50)
(function-call discount_func 1 "function:apply_discount" 50)
(: print_items (-> List[str] Any))
(function-def print_items "global" 52 55)
(function-param print_items 0 items List[str])
(function-call print 1 "function:print_items" 55)
(: .sample_items List)
(variable-assign sample_items "" 58)
(: .sample_prices List)
(variable-assign sample_prices "" 59)
(: .item_count Number)
(variable-assign item_count "" 62)
(function-call len 1 "" 62)
(: .total_price calculate_total)
(variable-assign total_price "" 64)
(function-call calculate_total 2 "" 64)
(: .receipt format_receipt)
(variable-assign receipt "" 65)
(function-call format_receipt 2 "" 65)
(: .zero_division divide_values)
(variable-assign zero_division "" 68)
(function-call divide_values 2 "" 68)
(: .data Dict)
(variable-assign data "" 71)
(function-call process_data 1 "" 72)
(: problematic_function (-> Union[str, int] str))
(function-def problematic_function "global" 75 78)
(function-param problematic_function 0 value Union[str, int])
(: function:problematic_function.result String)
(variable-assign result "function:problematic_function" 77)
(bin-op Add String Any "function:problematic_function" 77)
(function-call print 1 "" 81)
(function-call problematic_function 1 "" 81)
(function-call print 1 "" 84)
(function-call problematic_function 1 "" 84)
(module-depends "" typing.List)
(module-depends "" typing.Dict)
(module-depends "" typing.Tuple)
(module-depends "" typing.Optional)
(module-depends "" typing.Union)
(function-depends calculate_total enumerate)
(function-depends format_receipt enumerate)
(function-depends format_receipt calculate_total)
(function-depends process_data data.get)
(function-depends apply_discount discount_func)
(function-depends print_items print)
(string-op-pattern 0 Add String Any 9)
(string-op-pattern 1 Add Any String 9)
(string-op-pattern 2 Add String String 23)
(string-op-pattern 3 Add String Any 23)
(string-op-pattern 4 Add Any String 23)
(string-op-pattern 5 Add String String 26)
(string-op-pattern 6 Add String calculate_total 26)
(string-op-pattern 7 Add String Any 77)
(loop-pattern 0 for "function:calculate_total" 14)
(loop-pattern 1 for "function:format_receipt" 21)
(loop-pattern 2 for "function:print_items" 54)
(function-pattern 0 add_numbers 2 True "global")
(function-pattern 1 format_name 2 True "global")
(function-pattern 2 calculate_total 2 True "global")
(function-pattern 3 format_receipt 2 True "global")
(function-pattern 4 process_data 1 True "global")
(function-pattern 5 divide_values 2 True "global")
(function-pattern 6 get_discount 2 True "global")
(function-pattern 7 apply_discount 2 True "global")
(function-pattern 8 print_items 1 True "global")
(function-pattern 9 problematic_function 1 True "global")
